#! /usr/local/bin/perl
#
#
#########################################################
# Product: UPS                                          #
# Manufacturer: Socomec                                 #
# Modell: SOCOMEC                                       #
#                                                       #
# Retriving battery temperature.                        #
#                                                       #
#########################################################
#

use strict;
use Net::SNMP;
use Getopt::Std;
use vars qw ($opt_h $opt_H $opt_C $opt_w $opt_c);

# SNMP options
my $version = "2c";
my $timeout = 2;

##############################################################################
# The top secret community name (password)...
#
my $community = get_snmp_community ('snmp');
#
#
# Various SNMP OID prefixes to look at..
my $oid_xups_emp_temp = ".1.3.6.1.2.1.33.1.2.7"; # degrees celcius

# The information we returned
my $xups_emp_temp = 0;

# Thresholds
my $critical_temp = -1;
my $warning_temp = -1;

# Our return status - we start with 0 (OK) and hope for the best
my $status = 0;

# Our return string with lots of interesting stuff in it
my $returnstr = "";

# The SNMP hostname and community to use for the query
my $hostname = "";

# Grab the command line options
getopts("h:H:C:w:c:");

# If we didn't get any options, show some help and quit
if ($opt_h){
    usage ();
}

# Get the hostname, if it was given..
if (defined($opt_H)){
    $hostname = $opt_H;
} else {
    # We really need a hostname
    usage();
}

# Get the SNMP community
if (defined($opt_C)){
    $community = $opt_C;
}

# Grab the warning thresholds
if (defined($opt_w)) {
    my @warning = split(/\./, $opt_w);

    if (!($warning[0] eq "")) {
        $warning_temp = $warning[0];
    }
}

# Grab the critical thresholds
if (defined($opt_c)) {
    my @critical = split(/\./, $opt_c);

    if (!($critical[0] eq "")) {
        $critical_temp = $critical[0];
    }
}

# If we have both temperature thresholds, make sure the critical is higher than
# the warning
if (($warning_temp != -1) &&
    ($critical_temp != -1) &&
    ($warning_temp > $critical_temp)) {
    exit_clean ('UNKNOWN', "Critical temperature is lower than warning temperature!\n");
}

# Initialise the SNMP session via the Net::SNMP perl module
my ($snmp_session, $snmp_error) = Net::SNMP->session(
    -community => $community,
    -hostname => $hostname,
    -version => $version,
    -timeout => $timeout,
    );

# Grab interesting details
check_device();

# Shut down the SNMP session
$snmp_session->close();

# Do not use numerical comparision to avoid failures with ePN in Nagios2. Sigh.
$status = 'UNKNOWN'  if ("$status" eq '-1');
$status = 'OK'       if ("$status" eq '0');
$status = 'WARNING'  if ("$status" eq '1');
$status = 'CRITICAL' if ("$status" eq '2');
exit_clean ($status, $returnstr . "\n");


##############################################################################
##############################################################################
#
# Change the status level
#
sub status {
    my $newstatus = $_[0];

    # If the new status is greater than the old status, change the old status
    if ($newstatus > $status) {
	$status = $newstatus;
    }
}


# Grab a value from snmp
sub grab_snmp_value {
    my $this_oid = $_[0];
    my $this_value = "";

    # Try to grab the OID's value, if it exists
    if (defined($snmp_session->get_request($this_oid))) {
        foreach ($snmp_session->var_bind_names()) {
            $this_value = $snmp_session->var_bind_list()->{$_};
        }
    }

    # Return the value we got..
    return $this_value;
}


# Grab lots of interesting info about the device
sub check_device {
    # Grab some values
    $xups_emp_temp = grab_snmp_value($oid_xups_emp_temp);

    # If we have the remote temperature, add it to the output
    if ($xups_emp_temp) {
	# Have we broken a threshold?
	if (($critical_temp != -1) &&
	    ($xups_emp_temp >= $critical_temp)) {
	    status(2); # Critical
	    $returnstr = "Critical: ";
	} elsif (($warning_temp != -1) &&
		 ($xups_emp_temp >= $warning_temp)) {
	    status(1); # Warning
	    $returnstr = "Warning: ";
	}

	# Add the temperature
	$returnstr =
	    "$returnstr" .
	    "Temperature: $xups_emp_temp C"; 
    } else {
	status(1); # Warning
	$returnstr = "Temperature Unavailable";
    }

}

    # Add on some performance monitoring stuff to the return string :)
    $returnstr .=
	"|$xups_emp_temp" .
	";";

##############################################################################
##############################################################################
#
# Usage information
#
sub usage {
    print << "USAGE";

	Check an socomec UPS.

Usage: -H <hostname> [-C <community>] [-w <s>] [-c <s>]

Options:
	-H  Hostname or IP address of the Socomec UPS
	-C  SNMP read community (default is public)
	-w  Warning level for temperature max
	-c  Critical level for temperature max

USAGE

    exit_clean ('UNKNOWN');
}
