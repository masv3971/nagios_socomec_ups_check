#! /usr/local/bin/perl
#
# $Id: check_socomec-ink-volt 9637 2015-12-17 14:32:27Z masv3971 $
# $HeadURL: svn+ssh://svn.it.su.se/svn/system/nagios/scripts/checks/check_socomec-ink-volt $
#
# Don't use embedded perl for this check. Must be in first 10 lines of file!
#
# nagios: -epn
#
#########################################################
# Product: UPS                                          #
# Manufacturer: Socomec                                 #
# Modell: SOCOMEC                                       #
#                                                       #
# Retriving incoming voltage.                           #
#                                                       #
#########################################################
#                                                        

use strict;
use lib "/local/nagios/lib";
use SU_Nagios qw ( exit_clean get_snmp_community );
use Net::SNMP;
use Getopt::Std;
use vars qw ($opt_h $opt_H $opt_v $opt_f $opt_C $opt_w $opt_c);

# OID base for incoming voltage
my $OID_BASE = ".1.3.6.1.2.1.33.1.3.3.1.3.";

# SNMP options
my $version = "2c";
my $timeout = 2;

# The top secret community name (password)...
my $community = get_snmp_community ('snmp');

# Thresholds
my $critical_high_volt = -1;
my $warning_high_volt = -1;
my $critical_low_volt = -1;
my $warning_low_volt = -1;

# Our return status - we start with 0 (OK) and hope for the best
my $status = 0;

# Our return string with lots of interesting stuff in it
my $returnstr = "";

# The SNMP hostname and community to use for the query
my $hostname = "";

# Number of power phases attached to the UPS
my $num_phases = "0";

# Grab the command line options
getopts("h:H:v:f:C:w:c:");

# If we didn't get any options, show some help and quit
if ($opt_h){
    usage ();
}

# Get the hostname, if it was given..
if (defined($opt_H)){
    $hostname = $opt_H;
} else {
    # We really need a hostname
    usage();
}

if (defined($opt_v)) {
    # Get the snmp version for the UPS or use the default
    $version = $opt_v;
}

if (defined($opt_f)) {
    # We need to know how many power phases
    $num_phases = $opt_f;
} else {
    usage();
}

# Get the SNMP community
if (defined($opt_C)){
    $community = $opt_C;
}

# Grab the warning thresholds
if (defined($opt_w)) {
    my @warning = split(/\./, $opt_w);

    if (!($warning[0] eq "")) {
        $warning_low_volt = $warning[0];
    }
    if (!($warning[1] eq "")) {
    $warning_high_volt = $warning[1];
    }


    # If we also have the maximum volt value, make sure it is higher
    # than the minimum
    if (($warning_high_volt != -1) &&
    ($warning_high_volt < $warning_low_volt)) {
    exit_clean ('CRITICAL', "Warning volt maximum is lower than the minimum!\n");
    }

}

# Grab the critical thresholds
if (defined($opt_c)) {
    my @critical = split(/\./, $opt_c);

    if (!($critical[0] eq "")) {
        $critical_low_volt = $critical[0];
    }
    if (!($critical[1] eq "")) {
    $critical_high_volt = $critical[1];
    }

    # If we also have the maximum volt value, make sure it is higher
    # than the minimum
    if (($critical_high_volt != -1) &&
    ($critical_high_volt < $critical_low_volt)) {
    exit_clean ('CRITICAL', "Critical volt maximum is lower than the minimum!\n");
    }

}

# If we have both high voltage thresholds, make sure the critical is higher than
# the warning
if (($warning_high_volt != -1) &&
    ($critical_high_volt != -1) &&
    ($warning_high_volt > $critical_high_volt)) {
    exit_clean ('CRITICAL', "The high critical volt is lower than warning volt!\n");
}


# If we have both low voltage thresholds, make sure the critical is lower than
# the warning
if (($warning_low_volt != -1) &&
    ($critical_low_volt != -1) &&
    ($warning_low_volt < $critical_low_volt)) {
    exit_clean ('CRITICAL', "The low critical volt is higher than warning volt!\n");
}


# Initialise the SNMP session via the Net::SNMP perl module
my ($snmp_session, $snmp_error) = Net::SNMP->session(
    -community => $community,
    -hostname => $hostname,
    -version => $version,
    -timeout => $timeout,
    );

# Grab interesting details
check_device();

# Shut down the SNMP session
$snmp_session->close();

# Do not use numerical comparision to avoid failures with ePN in Nagios2. Sigh.
$status = 'UNKNOWN'  if ("$status" eq '-1');
$status = 'OK'       if ("$status" eq '0');
$status = 'WARNING'  if ("$status" eq '1');
$status = 'CRITICAL' if ("$status" eq '2');
exit_clean ($status, $returnstr . "\n");


# Change the status level
sub status {
    my $newstatus = $_[0];

    # If the new status is greater than the old status, change the old status
    if ($newstatus > $status) {
    $status = $newstatus;
    }
}


# Grab a value from snmp
sub grab_snmp_value {
    my $this_oid = $_[0];
    my $this_value = "";

    # Try to grab the OID's value, if it exists
    if (defined($snmp_session->get_request($this_oid))) {
        foreach ($snmp_session->var_bind_names()) {
            $this_value = $snmp_session->var_bind_list()->{$_};
        }
    }

    # Return the value we got..
    return $this_value;
}


# Grab lots of interesting info about the device
sub check_device {
    
    my $phase;
    my $OID;
    my $snmp_ret_value;
    
    $returnstr = '';
    
    foreach (1..$num_phases) {
       $phase = $_; 
       $OID = "$OID_BASE" . "$phase";
       $snmp_ret_value = grab_snmp_value($OID);
        if ($snmp_ret_value) {
            # Have we broken a threshold?
            if ((($critical_high_volt != -1) &&
               ($snmp_ret_value > $critical_high_volt)) ||
               (($critical_low_volt != -1) &&
               ($snmp_ret_value < $critical_low_volt))) {
                status(2); # Critical
                $returnstr .= ($returnstr?", ":''). "Critical ink volt:";
            } elsif ((($warning_high_volt != -1) &&
                    ($snmp_ret_value > $warning_high_volt)) ||
                    (($warning_low_volt != -1) &&
                    ($snmp_ret_value < $warning_low_volt))) {
                status(1); # Warning
                $returnstr .= ($returnstr?", ":''). "Warning ink volt:";
            }
    
            $returnstr .= ($returnstr?", ":''). "Ink volt phase $phase: $snmp_ret_value";
        } else {
            status(2); # CRITICAL
            $returnstr .= ($returnstr?", ":''). "Warning no data for phase $phase";
        }
    }
}

# Usage information
sub usage {
    print << "USAGE";
    $0

    Check a Socomec UPS\' incomming voltage via SNMP

Usage: $0 -H <hostname> -v <version> -f <phases> [-C <community>] [-w <volt min>,<volt max>] [-c <volt min>,<volt max>]

Options:
        -H     Hostname or IP address of the Masterguard UPS
        -v     SNMP version supported by the UPS (default is $version)
        -f     The number of power phases attached to the UPS !!! IMPORTANT !!!
        -C     SNMP read community (default is public)
        -w     Warning level min och max for inkomming voltage
        -c     Critical level min och max for inkomming voltage
               For example: lower volt 210 and max 250 ="210,250"
USAGE
    exit_clean ('CRITICAL');
}
