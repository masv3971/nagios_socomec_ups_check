#! /usr/local/bin/perl
#
# $Id$
# $HeadURL$
#
# Don't use embedded perl for this check. Must be in first 10 lines of file!
#
# nagios: -epn
#
#########################################################
# Product: UPS                                          #
# Manufacturer: Socomec                                 #
# Modell: SOCOMEC                                       #
#                                                       #
# Retriving output source.                              #
#                                                       #
#########################################################
#
use strict;
use lib "/local/nagios/lib";
use SU_Nagios qw ( exit_clean get_snmp_community );
use Net::SNMP;
use Getopt::Std;
use vars qw ($opt_h $opt_H $opt_v $opt_C $opt_w $opt_c);

# SNMP options
my $version = "2c";
my $timeout = 2;

# Various SNMP OID prefixes to look at..
my $oid_ups_output_status    = ".1.3.6.1.2.1.33.1.4.1.0";

# Our return status - we start with 0 (OK) and hope for the best
my $status = 0;

# Our return string with lots of interesting stuff in it
my $returnstr = "";

# The SNMP hostname and community to use for the query
my $hostname = "";
my $community = get_snmp_community ('snmp');

# Grab the command line options
getopts("h:H:v:C:w:c:");

# If we didn't get any options, show some help and quit
if ($opt_h){
    usage ();
}

# Get the hostname, if it was given..
if (defined($opt_H)){
    $hostname = $opt_H;
} else {
    # We really need a hostname
    usage();
}

if (defined($opt_v)) {
    # Get the snmp version for the UPS or use the default
    $version = $opt_v;
}

# Get the SNMP community
if (defined($opt_C)){
    $community = $opt_C;
}


# Initialise the SNMP session via the Net::SNMP perl module
my ($snmp_session, $snmp_error) = Net::SNMP->session(
    -community => $community,
    -hostname => $hostname,
    -version => $version,
    -timeout => $timeout,
    );

# Grab interesting details
check_device();

# Shut down the SNMP session
$snmp_session->close();

# Do not use numerical comparision to avoid failures with ePN in Nagios2. Sigh.
$status = 'UNKNOWN'  if ("$status" eq '-1');
$status = 'OK'       if ("$status" eq '0');
$status = 'WARNING'  if ("$status" eq '1');
$status = 'CRITICAL' if ("$status" eq '2');
exit_clean ($status, $returnstr . "\n");

# Change the status level
sub status {
    my $newstatus = $_[0];

    # If the new status is greater than the old status, change the old status
    if ($newstatus > $status) {
        $status = $newstatus;
    }
}

# Grab a value from snmp
sub grab_snmp_value {
    my $this_oid = $_[0];
    my $this_value = "";

    # Try to grab the OID's value, if it exists
    if (defined($snmp_session->get_request($this_oid))) {
        foreach ($snmp_session->var_bind_names()) {
            $this_value = $snmp_session->var_bind_list()->{$_};
        }
    }

    # Return the value we got..
    return $this_value;
}

# Check status on output source
sub check_device {
    # Grab some values
    my $xups_output_status = grab_snmp_value ($oid_ups_output_status);

    #Check the battery status
    if ($xups_output_status eq '') {
        status (2); # Critical
        $returnstr = "No response received";
    } elsif ($xups_output_status == 1){ # Status is Other
        status (2); #Critical
        $returnstr = "Output source status is other";
    } elsif ($xups_output_status == 2) { # Status is none
        status (2); #Critical
        $returnstr = "Output source status is none";
    } elsif ($xups_output_status == 3) { # Status is normal
        status (0); #Normal
        $returnstr = "Output source status is normal";
    } elsif ($xups_output_status == 4) { # Bypass
        status (2); #Critical
        $returnstr = "Output source status is bytass";
    } elsif ($xups_output_status == 5) { # Status is battery
        status (2); #Critical
        $returnstr = "Output source status is battery";
    } elsif ($xups_output_status == 6) { # Status is booster
        status (2); #Critical
        $returnstr = "Output source status is boster";
    } elsif ($xups_output_status == 7) { # Status is reducer
        status (2); #Critical
        $returnstr = "Output source is reducer";
    } else { # Status is not valid
        status (2); #Critical
        $returnstr = "Status is not valid";
    }
}


# Usage information
sub usage {
    print << "USAGE";
    $0

        Check a Socomec UPS\' output source via SNMP

Usage: $0 -H <hostname> -v <version> [-C <community>]

Options:
        -H     Hostname or IP address of the Socomec UPS
        -v     SNMP version supported by the UPS (default is $version)
        -C     SNMP read community (default is public)

        Builtin parameters
                other(1),
                none(2),
                normal(3),
                bypass(4),
                battery(5),
                booster(6),
                reducer(7)

USAGE
    exit_clean ('CRITICAL');
}
